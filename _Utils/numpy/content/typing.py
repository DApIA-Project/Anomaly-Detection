"""Numpy type hinting"""


# from t import Generic, TypeVar, overload
from typing import Generic, TypeVar, overload
from typing_extensions import Self
from numpy import float32, float64, int32, int64
from numpy import ndarray


T  = TypeVar('T')
T1 = TypeVar('T1')
T2 = TypeVar('T2')
T3 = TypeVar('T3')
T4 = TypeVar('T4')


class array_1d(Generic[T, T1],ndarray):
    @overload
    def __getitem__(self, key:int) -> T:...
    @overload
    def __getitem__(self, key:slice) -> Self: ...
    @overload
    def __getitem__(self, key:"list") -> Self: ...

class array_2d(Generic[T, T1, T2], ndarray):
    #1D
    @overload
    def __getitem__(self, key:int) -> array_1d[T, T2]: ...
    @overload
    def __getitem__(self, key:slice) -> Self: ...
    @overload
    def __getitem__(self, key:"list") -> Self: ...

    #2D
    @overload
    def __getitem__(self, key:"tuple[int, int]") -> T: ...
    @overload
    def __getitem__(self, key:"tuple[int, slice]") -> array_1d[T, T2]: ...
    @overload
    def __getitem__(self, key:"tuple[slice, int]") -> array_1d[T, T1]: ...
    @overload
    def __getitem__(self, key:"tuple[slice, slice]") -> Self: ...




class array_3d(Generic[T, T1, T2, T3], ndarray):
    def __getitem__(self, key:object) -> T:
        return super().__getitem__(key)

class array_4d(Generic[T, T1, T2, T3, T4], ndarray):
    def __getitem__(self, key:object) -> T:
        return super().__getitem__(key)


class float32_1d(array_1d[float32, T1]): ...
class float64_1d(array_1d[float64, T1]): ...
class int32_1d  (array_1d[int32,   T1]): ...
class int8_1d  (array_1d[int32,   T1]): ...
class int64_1d  (array_1d[int64,   T1]): ...
class bool_1d   (array_1d[bool,    T1]): ...
class str_1d    (array_1d[str,     T1]): ...

class float32_2d(array_2d[float32, T1, T2]): ...
class float64_2d(array_2d[float64, T1, T2]): ...
class int32_2d  (array_2d[int32,   T1, T2]): ...
class int8_2d  (array_2d[int32,   T1, T2]): ...
class int64_2d  (array_2d[int64,   T1, T2]): ...
class bool_2d   (array_2d[bool,    T1, T2]): ...
class str_2d    (array_2d[str,     T1, T2]): ...

class float32_3d(array_3d[float32, T1, T2, T3]): ...
class float64_3d(array_3d[float64, T1, T2, T3]): ...
class int32_3d  (array_3d[int32,   T1, T2, T3]): ...
class int8_3d  (array_3d[int32,   T1, T2, T3]): ...
class int64_3d  (array_3d[int64,   T1, T2, T3]): ...
class bool_3d   (array_3d[bool,    T1, T2, T3]): ...
class str_3d    (array_3d[str,     T1, T2, T3]): ...

class float32_4d(array_4d[float32, T1, T2, T3, T4]): ...
class float64_4d(array_4d[float64, T1, T2, T3, T4]): ...
class int32_4d  (array_4d[int32,   T1, T2, T3, T4]): ...
class int8_4d  (array_4d[int32,   T1, T2, T3, T4]): ...
class int64_4d  (array_4d[int64,   T1, T2, T3, T4]): ...
class bool_4d   (array_4d[bool,    T1, T2, T3, T4]): ...
class str_4d    (array_4d[str,     T1, T2, T3, T4]): ...


